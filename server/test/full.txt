This video is sponsored by the ultimate freelancing bundle by study web development dot com which gives you everything you need to start your own freelancing business including a hundred and thirty page in guide, invoicing client proposal templates, website, templates, and Seo check list much more. Visit the link in the description and use the code brad twenty five to get twenty five percent off. Hey, what's going on, guys. Welcome to my express crash course. So a couple of weeks ago, I did a ninety minute crash course on node js, and this is the next step seeing that expresses is the most popular web framework for no. And even if you've worked with express before, I'd still encourage you to watch because you'll most likely learn something new somewhere along the way. So we're gonna quickly look at some slides and then we'll jump in and we'll start to look at how express works. So let's first talk about what express is. It's a very fast una opinionated and minimalist web framework. Okay? So we all know what fast means. It... It's very high performance. Uno opinionated basically means that it's not a high level framework such as Lara valve or Ph are Django for Python. It's very basic at at its core. And it doesn't assume that you're gonna build your app or Api in any certain way with any certain design pattern. You have absolute full control of how you handle your request to the server and how you respond and that's also what makes it minimalist. Now I'm sure most of you know this but expresses a server side or a back end framework. So it's not comparable to client side frameworks like React or angular view, In fact, it's it's often used in combination with these frameworks to build very powerful full stack web apps. Many times you'll build out the Api with Express so that it takes requests from the front end and then it serves back data usually in json format, and then you can do what you want with it in the front end to render your your basically your client side views. Now you can also render views with express using either just plain Html or you can use a template engine like, handle or pug. So there's a lot of different options when it comes to building web apps using Express. So let's look at why we would use express. Well, for one thing it makes building node web apps about a hundred times easier, if you watch my node crash course, and you built out the simple web server, there was quite a bit of code there to do to do something very, very simple. We had to manually grab the Url load the five check the content type. It was very tedious. Express makes handling requests very simple and it's much much less code. So like I said, express is used for both Apis that serve json data as well as back end applications that render pages on the server. Okay? It's... Like I said, it's extremely fast. It gives you a ton of freedom. It's by far the most popular framework, some other examples of node frameworks are c, happy J and adonis, which are all great, but they're nowhere near as popular as express. C and happy J are very similar to express. However, Adonis is much higher level in my opinion, Ado adonis is very similar to Lara for Ph. And it gives you a lot more, but you also don't have as much freedom and it's a much larger framework. So the next advantage is is true for just node itself. And that's that. It's it's Javascript. So if you're building a full stack app with like, React, you... You're you're still using Javascript on the server side. So there's no need for multiple languages. So that's always an advantage, but that's not just for express. That's any anything that has to do with node. So as far as what you should know before starting to learn express I would say at the very least you should just be comfortable with Javascript. I'd also suggest having at least some basic knowledge of node as well as N m which is the node package manager. I'm not saying you have to be a node js pro, but at least watch, you know, a a couple tutorials. So you understand what it is, maybe look at some the core modules that are included and so on. Alright. So some other things that can help you out is knowing about Http knowing the status codes you're dealing with request, you're gonna have to send back responses. So it's helpful to know which which type of response you should send back. Jason, if you're dealing with, you know, building Apis, high order array methods, arrow functions, promises, all the newer features of Javascript, their commonly use with note as well. So I would suggest getting familiar with that stuff. Alright. So let's quickly look at just the the basic syntax of a web server this is the absolute bare bones to get a server to run in the browser. So basically, we just bring in express at the top using the the the common J modules syntax. Node, you can't use the import, the Es twenty fifteen modules with node by default just yet. If you do wanna use it. You'll have to use something like Ba to compile it. How otherwise, you're gonna use this syntax. And then to initialize Express, you just set a variable to the express method here usually called app and then you create your endpoints. So in this case, we're accepting a get request to the index route, which is the slash. And then we just have a callback function that takes in a request in a response, which you'll talk a little bit about in a second. And then we just do whatever we want. In this case we're just responding with the text of Hello world. And of course, we need to listen on a port. So in this case, we're listening on port five thousand. So if we went to local host port five thousand in our browser, we would see hello world. Okay? And, of course, you can create routes to whatever you want. If you wanted to do slash users or whatever. And you can also include parameters and we're gonna get into all that stuff. So within your route, you can do just about anything. Fetch data from a database, you can use mongodb be is very popular to use with no, but you can also use post, my. There's third party packages for just about any database. K. You can load pages. You can return json data. You have full access to the request and response. Now the request and response objects are very important. The request object represents the Http request properties for things like Url parameters, query strings, any data that's sent within the body, the H headers all this stuff is included in the request. You can also create something called middle, which I'll talk about in the next slide where you can change or add things to this object. And then the response object represents the Http response and and it's up to you to use this object to basically send back, you know, json data. Do you wanna render a template? So you can do multiple things with this response object. If you wanna redirect, you can do res redirect. So we're gonna look at more in depth into into both of these objects. As the course goes on. And then we can parse any incoming data with the body parser that's included with Express. Also, we don't have to put all of our routes in one file Express has a router so that we can store routes and separate files, and then we can just sport them so that we can clean up our application. Alright. So the last thing I wanna talk about real quick is middle wear. This is something that seems to confuse a lot of people. Middle air functions are they're just functions that have access to the request and response objects. Okay? Just like we do within routes. Express has its own middle wear and so do, you know, third party packages that you install. We can also write our own middle functions, which I'll show you how to do Middle air is is capable of executing any code, making changes to the request and response objects, editing the... I'm sorry. Not editing, ending the response cycle. Also, have to call the next middle layer in the stack. So when you write a piece of middle air, you'll call a next function. So you can just think of it as kind of a stack of functions that x execute whenever a request is made to the server, and you can do different things within those functions. That's the gist of it. Alright. So enough talk, let's jump in it's much easier to see examples or rather than me try to explain it. So we're gonna jump in. We're gonna look at pretty much all the fundamentals of the. Framework. Alright, guys, couple things before we get started. Obviously, you're gonna have to have node js installed on your system. If you don't just go to node j dot org, and go ahead and download and install it. Now this is the Express website express j dot com which has pretty good documentation has some guides we are using version four point sixteen point four in this crash course. However, version five is in alpha at the moment if version five is stable by the time you watch this, you should still be alright because most of the syntax, everything that's on the surface is pretty much the same. So you should be alright. Even if you're... Even if version five is an elf... I'm sorry, is stable. So I'm gonna be using post man, which is an Http clock to make requests to our server. Okay? So postman can make get put, post delete requests, So I'll be using that. So if you're gonna to follow along, i would suggest downloading that as well from from get dot com. Okay. So I'm gonna jump into Vs code, which is the text editor I'm using. Of course, you can use any text editor you want. I'll be using the integrated terminal as well. As far as, you know, installing packages and stuff like that. So I just have an an empty folder call express express crash course. And first thing we're gonna do is create a package dot Jason. So I'm gonna do n and knit, and I'm just gonna add on the flag, so I don't have to answer any questions. Okay. And that you can see that that creates a package dot Json file. Now we're gonna want to install it express. There's a couple things that I'm gonna install throughout this course. But right now, I'm just gonna install express. So I'm gonna say n m install or i express. K. So that that gets added to our package dot Jason, And now I'm gonna create our main entry point file, which I'm gonna call index dot js s. You also might see app js server Js really doesn't matter what you call it. So here, we're just gonna start off by creating just a simple express server. Let we just make this a little smaller. Alright. So we're gonna first bring in express so we're go create a variable and we're gonna set it to require express. Alright? And then what we wanna do is initialize a variable call app with Express. Alright. Now this app has a bunch of properties and methods, one of which is listen. So that's we need to use to actually run the web server we wanna listen on a port. K? Now what I usually do is create a variable sometimes in a separate config file, but I'm just gonna create it here. And we wanna set this to a port number I want use five thousand in development. However, we want to also add here process dot e n v which means that we wanna look at the environment variables and we wanna look for one called port. K? And then we just wanna put ore. So double pipe characters gonna be or. Now the reason we put this is because when we deploy, the server isn't... Most likely isn't gonna run on five thousand, it's gonna have the port number in an environment variable. So we wanna check that first. Okay. If that's not available, then we wanna run on five thousand. K? So then down here and listen, we just wanna put in our port variable and we can also add a callback is this second parameter, and I just wanna do a console log because when we run our server, I wanted it to to let us know on the console that it's running. So I'm gonna put in some back techs and I'm gonna say server started on port, and then we'll go ahead and put in our port variable. Okay? So just doing this will actually run a server so I'm gonna save it and I'll go down here and I'll type in node and then the name of the file which is index. And you can see server started on port five thousand. Alright. Now if I go to five thousand, so local host, and we wanna go to Colon five thousand. We're gonna get this message here cannot get slash. So slash the route for the index page. And it's basically just saying that it can't find a route handler for this slash. Okay. If we try to go to, like, slash vote, it'll say cannot get slash above because we haven't created any route any endpoints. So let's go back in and let's create a route here. So to create a route, we wanna use app and then the type of request that we wanna handle. Now when you just go to a web page, that's a get request. So we wanna do app dot get, and then the route is gonna be just flash and then the second parameter is gonna be a function. K? If you want to use this syntax, you can do that. And pass in your request and response. However, I'm gonna use an arrow function. So I'm gonna get rid of the function keyword and i'm just gonna put an arrow here. Alright. Now the every route we create is gonna we're gonna have access to this request in response on object we're gonna look into both of these as we move along here. Right now what I wanna do is just take the res the response object and it has a method called send that will just send something to the browser. So some text or whatever. So I'm just gonna say hello world. Okay? We could actually put H html in here. If I wanted to put an h one, we could do that and we'll save it. Now if I go back and I re reload, notice that it it's not working. And the reason for that is by default, we have to restart our servers. Down here we'll do control c and then run node index again. And then if we go back, we'll get hello world. Now it's just the h one if we look at the source code, Oops I don't wanna open that. Let's look at the source here and you can see it's just an h one. There's no doc type, nothing like that. There's no content type. So this... Obviously this isn't what we wanna do. I'm just showing you this as an example. So let's head back in and I I don't wanna have to keep resetting the server every time we make a change. So what I'm gonna do is all package called Node, which will constantly watch our server so we don't have to keep reloading. So I'll control c to stop and let's do n install and I'm gonna add dash d because I wanna install this as a dev dependency and then node on. Okay? It's a dev dependency because it's only for development. We're not using it in production. Alright. So now we have node installed now to use it, we're gonna go into our package dot Json, and we need to create a script. K? So we're gonna actually create two script. One is gonna be start, which is just simply gonna run node index So that will most likely be used in deployment. And then for a dev, I'm gonna create a a script called Dev, and we're gonna use node index. And the difference is node index, you'll have to keep resetting the server every time you make a change, node one will constantly watch it. So we'll save this and then let's go down here and run n m run dev. K? So you can see it's running on five thousand. However, node mine is run So if I were to go here and let's say add some exclamation marks and save and go back and reload. You can see that the changes are made. I don't have to reset the server. Okay. So Node is an extremely handy tool. Now as far as what we send as a response, we have a bunch of different options. Obviously, we have send, but we're not gonna... That's not used too much. We could send a file a single file if we want. I'll show you how to do that. We could send Jason with res dot Json. We could do res dot render if we had a template engine, we could actually render an Html template where we could actually put variables in stuff like that. So examples of templates are pug which I really don't like. I don't like the syntax. I usually use handle handlebars or E if I'm rendering templates on the server. Now what I wanna do is bring in the path module which is just a node js module to deal with file paths. And I'm gonna just load an Html file here. So I'm gonna say, instead of res send, I'm gonna use send file. Okay, which will actually send a file. And I'm gonna use path dot join. We we did this in the node course. And I'm just gonna get the current directory with double underscore name, go a folder called public and load a file called index dot Html. Alright? So we wanna create that so I'll create a folder called public. And let's create a file in there called Index html. And I'm just gonna put some boiler plate in here And let's just do my website. My website. Alright. So now if we go back to our browser here and reload, we get my website. And if we look at the source code, you'll see all of the Html. So we can load H html files this way. However, this is an ideal because we'd have to put a route manually for every single page if we want an about page, a contact page, all that stuff, we have to put separate routes. Now if you want just just a static server that serves just, you know, Html, Css, images, stuff like that, then express actually comes with functionality to to make a certain folder or a static folder. And we wanna make this public folder So we don't even have to do this. So I'm just gonna i'm actually gonna just get rid of that for now. And let's go ahead and set a static folder. Alright. So the way we do this is we say app dot use. K. Uses the method that we use when we wanna to include middle wear, and I'm gonna show you how to write your own middle wear and a little bit. And what that is. But right now, I'm just gonna include express dot static. And then we wanna point to the folder that we want set as our static folder. So I'm gonna use path dot join and we'll get the current directory and then point to public. K? So just that one line right there is setting this public as our static folder. So we can actually now go back and reload and it still works. Now I can put any Html file I want here. Like, let's say a bog dot h Ml. Oops we want that in public. And then I'm gonna just copy the index paste that in here. Let's go ahead and just change this to about... And now if I go back and I go to slack about dot Html. There it is. So we can just create as many Html pages as we want. Now we can also create Css files. So if I wanna put a Css folder and say style dot css. We'll just do, like, body. Set it to a dark background. And let's do color, white. Oops. K. Now I'll go to index Html, and we can just simply include a link to css style Css. I'll also put it in the about page. And now if I go back and reload, you'll see that the Css is in effect. K? I can go a slash it about. Now i'm sorry. Boat has to be dot Html for the static server. Now if you took the node crash course, basically, this is what we did and we wrote a whole lot of codes be able to do it. We had to handle the content type ourselves. We had to handle loading the H html files loading Css, any the images, stuff like that. With express when we when we deal with this static folder, we don't have to do anything except just put the files in here and it will just work. And all we have to do is write this these few lines of code. K? So that's how we can create a static server that just serves you know, just regular Html files. It's usually not what you're gonna use express for. For most for the most part, you're gonna build either jason Apis so that you can connect from a front end like, React to something like that, which I'm gonna show you how to do or you wanna render templates where you can insert dynamic data, so you can create a dynamic app rather than just a static website. Alright. So I'm going to... I'm gonna leave the static folder there in case we wanna use it, but let's go ahead and move on and let's create a route here. So I'm gonna say app dot get. And let's do slash api slash members. K. So basically, I wanna create kind of just a a a a simple rest Api. We're not gonna be dealing with a database. We're just gonna have a hard coded array but the it's the same principle when we're dealing with routes and responses and all that stuff. So let's put in request response. We'll use an arrow function And what I wanna do is return some Json. So I'm actually gonna just hard code right here. I'll actually I'll copy and paste it just so I don't have to type it all out. So I'm just gonna create an array of members. So basically, just users, who we have an Id and name an email and a status. We have three of them. So I wanna to return this as Jason when we hit this route right here. So we could we could hit it with, you know, react or view angular. We can hit it with postman, which is what we're gonna do. And we can get these members. So let's go ahead and just do a res dot json. Okay? If you wanna return Jason, we just do res dot Json and we can simply just put in members. K? Now we don't even have to do like g and string or anything, even though these are Javascript objects because this will take care of it. Okay? So let's go ahead and save that. And then I'm gonna open up postman, make sure this is a get request and let's say http local host poor five thousand slash api slash members. And there we go. So we get our three members. Okay. So it's the simple as that now since this is only one expression here and we're using an arrow function, I don't even need to to use curly braces. We can just go like that. K? And I'll just put a comment here that this route gets all members. Okay? Now I want to just take a second before we get into creating other routes and talk a little bit about middle air. So as I said middle wear functions, there just functions that that have access to this request and response and you can actually, you know, change things. You can add things and so on. So what I wanna do is just create a simple logging middle air function. So let's see. Actually, you know what? Let's put this let's put these in a separate file. Just so doesn't clog this up or... So I'm just gonna copy or cut those out, create a file called members dot js s upper uppercase m because it's basically our model and paste that in and then we just wanna export this. We wanna do module dot exports equals members. K? And then we can just bring it into our index js. So we'll say cons members equals dot slash. I'm sorry. I wanna do require. And let's do dot slash members. Okay. So that should still work. Let's test stood out real quick, and it still works. Okay. So as I was saying, gonna create just a simple middle wear function. So let's go right here and let's say cons, I'm gonna use an arrow function, but you could use a regular a function. I'm gonna call this logger. Okay? Now when you create middle where it takes in the request response and then next. K? And you always wanna call next last so that you can move to the next middle air function that's in the stack. Okay? So this like I said, this is an arrow function And all I wanna do is log something. So for now, I'm just gonna say, let's just say, hello. Okay. Now in order to initialize your middle air, actually I need to do next. Like I just said. In order to initialize it. We do app dot use, and we're just gonna pass in logger. K? Let's say knit middle. So now if I go and I hit... Actually gonna go back. I'm then go to post man. And just make a request and then go back and look in the console and you'll see hello. Okay? So every time we make a request, this middle layer is gonna run and we could do absolutely anything in here. We could execute any code we want. We have access to the request in response. So what I'm gonna do is I'm gonna log the Url that's hit and the date. Okay? So we actually have access to certain parts of the Url with the request objects. I'm gonna put some back in here, and I'm gonna say request dot protocol. Okay? So this is gonna give us http. And then I'm gonna do colon slash and then we wanna get the host, which is also available in the request object. So we'll say request dot... I'm sorry. We need to do request on get host. We can get different parts of the Url. And then we want the... What's called the original Url, which is the the page. So after that, let's do request original Url. Alright. So let's just see what this gives us. If we save this and then we go back postman, send a request and look in the console, gives us undefined. That's because I did res on request. And, yeah. It should work. So let's try that again. Okay. So now we get the whole Url that's hit five thousand Api members. Now I also wanna put the the date and time formatted after it. So I'm gonna use a a third party package called moment which will it deals with dates deals with date formatting. So I'm gonna stop the server real quick and just do an N m. Install moment and then we'll run our server again. And let's bring in moment. So cons moments equals. Require moment. And then after the Url here, I'm just gonna put a colon and then I'm gonna say moment which is a function so we actually have to put this in the syntax. And then we just wanna call dot format, which is a method. Okay, And that should give us the current date formatted. So I'm gonna save that and I have pretty installed, so it just kind of formatted this a little bit. And if I go back and we make another request and we go and look in our console, now we have the Url and the date. Okay. So we could go further and we could save this to a file with the F s module if we wanted to. You my point is you can do anything you want in terms of middle air and you have access to these requests in response objects. This is not something that's very advanced, but it is doing something. So I'm gonna actually put this in a separate file because I wanna save pretty much everything I do so you guys have it as a reference. So I'm just gonna create a folder called middle. And let's create a file called logger dot js s. Alright? And then we'll just grab this whole thing here. This whole function, cut that out and put it into logger js s and we just want export. So module dot exports equals. K. And then we'll bring it into our index js. Cons logger and we wanna set that to require. And go into middle slash logger. Okay? And I'll save that and it should still work. So if I make a request, moment is not defined. So the logger file doesn't have moment included. So I'm gonna just cut it from here because we don't need it in here anymore. So we'll just bring it into logger. Okay. So now oops keep opening Chrome. So we'll go ahead so that works, and then it's still logging down here. Okay? And as many requests as we make? I just hit this a couple time couple times, it'll keep logging. Alright. Now I don't actually want this to keep running just gonna comment out the initialize here. So it doesn't actually log anymore. But now you can see how middle where works it's implemented. So we're gonna move on. Now the next thing I wanna do in terms of our little Api that we're creating is I wanna get a single member. K, an individual member. So I'm gonna do say get single member. So we'll say app dot ga, we wanna get request and we wanna go slash apis slash members, and then we need to specify an Id. K. We wanna get the member by their Id. So we're gonna say colon Id. Which is a Url parameter. K? And we can use the request object to grab whatever is in there. So let's put our callback request response. Alright. Now like I said, we can use this request object to get whatever's is in there. So I'm just gonna do a quick res dot. We'll just do a res dot send just so I can show you how this works. So if we say request dot, dot, and then we can get any parameter that's passed in here. So we want the Id. Okay? Now if I go to postman, and I'm just gonna open up another tab and let's look at local host five thousand slash api slash, let's say four. And you can see it gives us four. Okay? So obviously, that's not what we want. We wanna get if we want the member with the idea for, which there is one. But let's go ahead and get rid of this. And let's just do a res dot json. And I mean, there's different ways we could do this. I'm gonna use the filter method, which will take an array and just filter things out with filtered it out based on a condition. So we'll take the members array. Filter. K. So it's a method we tack on to it. I'm sure most of you guys have used Filter before. And then let's say, for each one, we'll call it member. Gonna use an arrow phone and we'll say we wanna return the member id that's equal to the request dot dot id. Now we're gonna have an issue here. So let me just show you if we go to postman, we know that there is an Id of one. So let's go ahead and send that. And notice we don't get anything back. So the reason for this is the Id is a number. K? In our member's array you can see the Ids in number. However, request Id sends it as a string So we simply need to... We need to wrap this in par. And the reason for that is I use triple equals, which means that this type has to also match this type. So let's go ahead and do parse in and wrap that. Alright. So now if I go back to postman, we send that again, we get the Id of one If we do two, we should get the user with the auto member with the Id of two. Now let's take it a step further because if we do like let's say, six, it gives us nothing back, which may be fine. It all depends the way you construct your Apis is is completely up to you or or whoever it's up to. But what I wanna do is is give a a message saying that there is no member with this Id. Okay? And there's a lot of different ways you can do this. I'm gonna use the some method. So I'll create variable here called found. And this is just Javascript. Everything that I'm doing in here aside from this request Id is just Javascript. So let's say members dot sum. And same thing it's a high order array method we're gonna pass in member, and we're gonna say member dot id equals. And we're doing the same thing we're doing here. We just check to see if it exists. Because what some does is it, it'll run this condition and give us a true or false based on on this right here. K? So if it doesn't exist, this will equal false, if it does exist, it'll equal true. And then I'm just gonna add an if statement here, so it found then let's just move this up here. And then we'll say else. So how do we want to handle this if there isn't a member of that Id? Now this is where Http statuses has come in. If we just do res dot Json and everything is fine, you'll see that in postman, it's a two hundred status, which means everything's okay. Now the status I wanna give if there isn't a member with that Id is a four hundred because that means that it's a bad request. It means they didn't give us the correct request information to give them a correct response. So we're gonna do res status so we can set the status is something different, and we're gonna set it to four hundred. And then we can just do dot Json, and we can tack in whatever we want, usually, some kind of message. So I'm just gonna say message member not found. Okay? Actually know what. We could even do this. We could we could use back here. Oops. So use back and we'll say, let's say no member with the Id. And then we can just put in our request dot dot id. So I think that's kind of a cleaner way to handle the response. So now let's try this again. We'll try to get members six and we get message, no member with the Id of six in notice we also are giving a four hundred bad request. So let's go back in and now I wanna be able to actually create a member. Now having all these routes in our index file, it's getting kinda cramped up. Actually, I'm gonna close all these up. We don't need these open. So this is getting cramped up. So we can use the router that comes with Express to put all of our all of our similar routes into a single file. So I'm gonna create a folder in our root here called row And inside routes, I'm gonna create a folder called Api just because not all of our routes might they might not all be Apis where we're serving Json. We may have routes where we're actually serving side templates. So I usually I'm building an Api I'll usually create an Api folder. And then let's create a file called members dot js s. And everyone does things different. That that's the thing with Express as I said it's very una opinionated, so you have full freedom to structure your files and your code, however, the hell you want. So you're gonna see it's gonna be different from application to application. So let's take both of these routes, the all members and single member. And let's cut that out, and let's put it in member. Alright. Now in order to use the express router in order for this to work, we need to do a couple things here. We need to bring in express so that we can use the router. K. So now we can say cons router, and we're gonna set that to express router capital r. Okay? So when we use the router, we actually when we make our request when we handle our request, we use router dot and then the type instead of app. K. So we'll do router dot get router dot git. Now we're dealing with the members So instead of having members in our index, let's cut that out and let's bring it into the member's route file. And then the last thing we wanna do here is export. So let's say module exports equals router. Alright. Now in order for this to actually work, we're gonna go into our index js s and let's go down to the bottom here. We'll go right. Let's go right below the static folder and we need to do an out dot use and then put the route that we want, which is gonna be slash api slash members. So basically, like, the parent route. And then we want to set a second parameter requiring that file that we just created. So it's gonna be let's see dot slash slash p i slash members. Okay. Now since we have the route here Api members. We don't need it here or here. So we just replace it with a slash. K? So that'll be slash and then this one will be slash id. Okay? So now this should work so we'll go back to postman. See members dot com is not a function that's because members is now in a different location since we moved it. So we need to go dot dot slash outside of the Api folder and then dot dot slash outside of the routes folder. K? So we'll go back no Id with six. Let's try one. K. That works. If we go over here and just do Api members, we get all of our members. Alright. So just got, we just kinda cleaned everything up a little bit. So now we just have this one line here, and we can just say, members, Api routes. Alright. So let's move on and let's create a member. I'm gonna go down here and say create member. Now whenever you create something on the server, are you're adding to a database, whatever. You wanna make a post request in most cases. So to handle a post request, we're gonna say router dot post instead of route get. Okay? Whether it's a form submission or whether it's getting sent with the Fetch Api or Ax or something like that. And then in here, we're gonna do just slash. K? Because we wanna hit the slash api slash members. Now even though we're using it right here, we can still use it here because we're using different Http types here. So our methods i should say, so we have get post. K? So we can use the same route as long as there different methods. So let's create our arrow function. Now we wanna be able to send data and we when we get that data, it's gonna be in the request object. So for now, I'm just gonna do a res send and I wanna send request stop body. Okay. Now we're gonna go to postman. Let's open up a new tab and make a post request to http t five thousand api slash members. Now we wanna send some data I wanna be able to send an e the email and the name for the member. So under Headers, let's create the content type of application slash json, because that's the type of data we're sending. And then in the body, We'll go ahead and choose raw and let's put in some Json. So we'll send a name of let's do... I don't know, Jake Smith, and then we'll do an email. Of jake at gmail. Alright. Now if I send this If we look down here, we get nothing back. We get a two hundred response, but nothing back. And the reason for that is we need to include use a body parser. So that we can parse the data that we're sending in the body. Now you used to have to install a a separate body parser. It was a third party package that you had to install. However, with the newest version of Express, we don't have to do that. There's one included with Express. We just have to initialize it as middle ware. So gonna go back into index j s and let's say app dot use. Let's just put a comment here. Let's say Body parser, middle. And we say express dot json. K? So that will allow us to just handle Rod Jason. Now we also wanna handle form submissions. So we're also gonna do app dot use. Express dot Url encoded, and we just pass in an object with extended and set that to false. So that way, we can handle Url and encoded data. Now if I go back and we send this again, you'll see that when we do the res dot send for the request body, it gives us the data that we just sent. Okay? So that's coming from this. Now obviously, we don't wanna just send that back. We want to create a new member. So I'm gonna create a variable here called new member and set this to be an object Now, usually, when you're dealing with Ids and and you're using a database like Mongodb d or are My or post, it usually creates the Id for you. So we're not using a database. I'm gonna actually install something called Eu id, which will generate a random Id for us. So I'm gonna just do n m install Eu id. And let's just go ahead and run our server again and then let's bring in that package. So Eu Id Okay. Now for the Id, I'm just gonna set it to u id dot version four, which is a method. And that will just generate a random universal Id. Alright? And then for the name, we wanna get that from request dot body. K. So we want request body name. The email we're sending in the body as well. So request dot body dot email and then status, I'm just gonna set status to active okay. So it'll always be set to active when a a new member is created. Alright. So let's see. We have this object. Now we want to add this new member onto our array however, I wanna make sure that the name and the email are sent with the request. So let's go ahead and do a quick check here. So we'll say if not new member name or not new member email, then let's return or we can just do res dot status Let's do a four hundred because again, it's a bad request because they should be sending a name and an email and then we'll say Jason and let's do a message and we'll say, please... We'll just say, please include a name and email. Alright. And then down here, let's do a members... Actually, let's do an ls. Actually, one thing I'll mention here is if we don't do an else here, we're gonna get an error that says headers are already sent. And if that's the case and you could just do return like that in that way we don't need an else. So let's just do members dot push, okay. So we're taking the members array, which is just our hard coded array. We're pushing on the new member. Alright. Now that will add it to the array, how however we need to send back a response. And again, it's up to you or what you want what you want to respond with, you could respond with the actual just the new member itself. What I'm gonna do is return the entire array of members that includes the new one. So I'll just say res dot Jason and let's pass in members. Okay. So let's save that. And then let's go back here. Let's try it first without an email. So we'll send that. So we get please include a name and email. And now we'll go ahead and include the email. And send, and we get all of the current members and our new one. K? So we have Jake Smith, Jacob Gmail active, and then this is the Id that Eu ui generated for us. Alright. Cool. So the next thing I wanna do is I wanna be able to update a member. Now when you're dealing with a a real Api, obviously, you're gonna have a database. You're not just gonna have a file with your data. And I don't wanna get into that because that's something it's just... I wanna stick to express as much as I can without going into, you know, Mongodb d or certain databases. But what will happen is you'll just you'll install a package, like, Mon, which is an an object relational or object, data map for Mongodb db. And you would connect to your database and instead of just pushing on like this, you would do something like members, you take your members model and call save like that and then pass in new member. So some kind of syntax like that. Whether you're using Mongodb d or you're using, like sequel eyes, which is a great Or for my and post. Alright. So we're just dealing with hard coded data. So anyways, let's move on. Let's go down here and let's say update And I'm just gonna copy the whole get single member here because it's gonna be similar. We wanna check and make sure that there is a member with that Id. K however, it's gonna be a put request. When you update something on the server, in most cases, it's gonna be a put request. So we're gonna check to see if the member exists if it doesn't, we're gonna do the same member with the Id. However, if it is found, then we want to... First of all, let's create a variable called update member and set that to the request dot body. K. So we'll get the the email and the name from this request stop box And then we basically wanna loop through the members we have and then check to see if it may matches this Id. If it does, that's the one we wanna update. So let's do... Let's do a four each. K. And and like, I there's a lot of different ways you can this. This is just Javascript. I mean, I didn't have to do all this, I guess, but I'm just trying to give you an idea of how how to create a simple Api. So let's do members for each member. We'll put an arrow and then let's do an if statement here and we'll check to see if the member dot id is equal to parse request dot dot id d. If it is, that's we wanna update, so we'll just set member dot name to request body dot name, and then we'll set member dot email to request dot body. Email. Alright. Now the problem with this is they may update just the name and not the email or or vice versa. So we should probably check to see if it's if the name and email are actually sent. So what we'll do is use turn operator, let's say updated member dot name oops name. So if that's included, then let's use that. And I didn't... I actually I didn't mean to do this request body. I meant to do the updated member name So let me just get rid of that. Alright. So updated member name else, then we're just gonna keep the member name whatever that is. Okay. We'll do the same thing here. I'm just gonna grab this except we're gonna do email. Okay. So just to reiterate, we're gonna make a request to Api members Id. A put request. We're gonna send along a name and email or or either one. We any anything we wanna update, basically. Check if it's found, if it is, we're gonna put the request body in this variable we're gonna loop through our members, check to see if the Id is equal to the id that is passed in here. If it is, we know that's the one we wanna update. So then we're gonna set the member name depending on if the name was sent with the request. If it was, we'll send it to the new name if it wasn't we'll keep the old one. K? Same thing with the email. Now we need to send back a response. So what I'm gonna choose to do here is... Let's see. I'm gonna just do a res dot json. And I'm gonna send a message that the member was updated and I'm also gonna send the member itself, k, which this is the same as doing this since these are both the same. We can just do member once. Alright. So let's save that now, let's go back to postman and gonna copy this Url, open up a new tab and make a put request to slash. Let's do slash one. That's the one we'll update. And then we'll add in our content type of Json. Go to body, and let's change the name. I think What's the first note? Let's see. Me just check this John Doe. So let's change John's email address to, let's say a Yahoo address. So just do email and set to john at yahoo dot com. And let's send and see what we get back. So we get member updated and everything is the same except for the email. K? So we we have just updated the email. The name is same, everything else is the same. Alright. And obviously, this stuff is just in memory. There's no database. It's not getting persisted, but again, the request, the response, all that stuff is gonna be the same. It's just this functionality this stuff here will be different if you're using a database. Okay. So let's see what do we get left? We we can get members we can get a single member, create update. So we just have delete left, which is should be pretty easy. So I'm gonna actually copy the get again. And let's say delete number, and this is gonna be a delete request so we wanna do router dot delete k. We need the Id because we need to know which one to delete. We'll keep this whole found thing here. And then instead of just returning that, which actually I do wanna do, but Let's see. Instead of doing this, we wanna filter out the one with the Id. So we're gonna say not equal to. K? We're still gonna use filter, we'll say not equal to. But let's let's also put a message. So in this res jason, what I'll do is say message member deleted and then... Oops. Let's put a comma here, and then let's just say member. Actually, let's return yeah. All the members because that's what this is gonna do. It's gonna return all the members except the one that was deleted. Alright? And then we just want to put our curly brace here. Alright. So let's save that pretty fixed it up so you can see it a little better. And now if we go and we make a delete request to this, let's delete the first one John Doe. And send. We get member deleted. And then if we look at our members array, John doe is gone he's not there because we used filter to filter the of of one out. Alright. So we have a cr Api where we can create read update and delete. So now I wanna move on to rendering templates using a template engine. And there's a lot of different template engines that you can use. We're gonna go ahead and use express handlebars. So if we go to the github for that, we need to install this. So install express handle handlebars. And basically we can have a views folder and we can create a main layout to wrap everything and then we can create individual views and we can render them using reds dot render. Okay. So this is gonna be a lot easier than what we just did with the Api and stuff. So let's go ahead and close up our members routes and inside, actually, let's install it first. So I'm gonna just stop our server. Let's do an n m install express handle handlebars. Okay. We'll go ahead and run our server again. And then in the index js s, I'm gonna go ahead and bring this in. Go right here and let's say cons ex x p so express handlebars, h bs. And this is in the documentation, all this stuff. Let's require express handlebars. So should be dash. Alright. Now this takes... We have to add some middle here so that knows to use handlebars. So let's go right here and just say handle handlebars middle. So first thing we need set the engine. So app, app dot engine. And let me just show you that this is in the document. So I'm just doing this right here In fact, i can just copy this. So we're said setting the engine, the view engine, our template engine to handle box and then we're just passing in this Ex S. And here we're setting the default layout to a file name of Main. So when we create our layout, we wanna call it main dot handlebars. And then here, we're just setting the view engine. K? So we need these two lines in order to use handlebars. So let's save that and let's go into our folder structure and create a folder called views and inside views will create a folder call layouts and here's is where we wanna create our main file. So we'll say new file main dot handlebars. K? Now this is a layout it's gonna wrap everything. So we want our doc type our title, all that stuff. We'll just say members app app and let's just grab bootstrap so that we can make this look decent. Now for... Let me just explain for the most part here, you're not really gonna do this where you have a json Api and then you also have server rendered templates. It's usually gonna be one or the other. You're usually gonna either be building an Api so that you can have react or view or something on the front end and you're just serving Jason or you're gonna have a complete server side app where you use templates. Since this is a crash course, I'm just trying to show you both as well as a static server static folder that we did earlier. So let's see. Let's go to get bootstrap. And I'm just gonna grab the C here. And let's go back here and just paste that in. Alright. So in the layout, wherever we wanna output the rest of our views with handlebars. We wanna use triple curly braces and we wanna put in body. K? So that's gonna put any views. Now I just wanna wrap this in a class of container just to keep it in and let's put a class of m t four. That's margin top. It's just they're just bootstrap classes, and we're gonna put body inside there. Alright. Let's save that. So now I wanna create a view for the index page. So inside views, not in layouts but just in views. I'm gonna create a file called Index dot handlebars. And for now, I'm just gonna put an h one and we'll just say members. Alright. Now if I wanna render this, I'll create a route, so let's go let's go right here and say app because we're not in the router anymore. We're in the main. So we'll say app dot get because I want this to render on the... Basically, like, the homepage, the index page. And we just need to do res dot render, and we can pass in index. Because you wanna render the index view. Just say page route. Alright. So we'll save that and now if we go back to our application and reload, we get members. Now the reason the static Html file isn't showing is because we have static down here. If I were to move this above our home homepage route and save and go back. Now it's gonna show that. And like I said, in most cases you're not gonna have both like this. This is it's just because it's a crash course. And I'm just... I want you guys to have it as a reference. So usually, you're not gonna do something like this. Well, I shouldn't say that, a lot of times you might have a static folder and you might have a form in one of the Html files that makes a post request whether it's to add to a database or something and then, you know, have, like, app dot posts slash contact or something like that. Alright. So let's see. Let's add to our index handlebars file. So we're gonna have... Actually, I wanna show you how we can pass data in. So this render will take in a second parameter of an object and we can send in whatever we want. So let's say, like, title and we'll put... Let's just put like member app in then we'll go to index and let's replace this. Now to use a variable with handlebars, we just use double curly braces like that. And we'll just say title. So now if we go back, we get members app. Alright. I'm just gonna center that. So let's do class. Text center. We'll do margin bottom three. Okay. Now I want to also pass in the members and list them in this template. So what we can do is bring in our members. Remember they're in the this member's J s file. So say cons members equals. Let's do slash members. So now we have access to that array, and I'm gonna pass it into the template here. So i'll put a comma, we'll say members, then that's all we need to do because doing this is the same thing. Now this is an array. So in our template, we wanna loop through it and then output whatever we want, whether it's just the name or the name and email and so on. So I'm gonna put in h four here. We're just gonna say members and then let's do a Ul and now I wanna loop through the members we passed in. And to do that with handlebars we do number sign each and then members. K? And then we end it with slash h. And then in here, I'm gonna put an L i and let's just do the name, so we can say this dot name... Let's also put the email. So I'll do Colon and then we'll do this dot email. Let's just add a bootstrap class. So we'll say list group. And then each list item we'll do list group item. Alright. So let's save that. Let's go back and reload, and you can see that it's loading those members. Okay. Now last thing I wanna to do is create a form so we can actually make a request to our Api to add a member from the form. So I'll just put it in the same file. We could create a new a whole new view for this whole new template or whatever, but I'm just gonna put it all in here. So up here, let's put a form Let's give it a class of m four. It's just gonna move everything down. Now the action is gonna be slash apis slash members, which we already created. And then we wanna make sure that the method of this form is post. Alright. And then we're gonna go ahead and add a form group class and then let's do a label. Let's say this is for name and input with the the of form control, these are just food bootstrap classes. Now it's important to have a name attribute because that... That's what's gonna get sent in the request body. Just like when we sent Jason from postman, now we're sending it from a form. Okay? That's why we have the Url encoded this right here. This will handle the form data. So name is gonna be name. Right. Now I'm gonna copy the form group because we also want the email. So we're gonna change that email Let's change... Change the type to email. Name. K. And then let's put submit button, so i'll do an input with the type of submit value. We'll just say add member just give it a bootstrap class of Bt Bt n primary and let's do Bt ten block. Alright. So go ahead and save that. And let's reload this page here. Now we have form. Now once I send this, it's gonna hit the let's see. Routes Api members. It's gonna hit the post right here. So it'll create a new member. It's gonna get this in this from the form. And then down here, it's gonna add the member and then it's gonna return json, which usually you wouldn't do if you're dealing with templates. But I'll show you that after. So let's go ahead and add... Let's say, Kevin Smith. Kevin in at Gmail and send and you'll see that it it returns Jason, and it it includes Kevin Smith. Now usually if you're dealing with templates, you're gonna redirect. You're not gonna show Json in an application like this. If you're using server rendered views. So what you would do here. I'm just gonna comment that out. You would most likely do something like res dot redirect and then read your back two slash same page. Alright. So let's go back. And then let's do Kevin Smith again and add member. And what happened was it added the member and it redirected us back to slash, which is this page here and you can see that Kevin got added. K. If we had like Matt Johnson, send and now that's getting added as well. Now I'm gonna go and just uncommon the redirect or comment to redirect and uncommon Json just because I want the Api to to work. And then I'm just gonna put a link in the the index page to the Api. So to the the slash Api slash members. So I'll do... Let's do an a tag with the class of bt n, b n dash light, let's do margin top four. And we'll say slash i slash members, and let's just say visit Api. Alright. So that way, on this page, we have a button that will go and show us the Json Alright. So I mean, this is kind of a a weird thing to build, but I wanted to show you guys the different things you can do as far as building adjacent Api as well as rendering templates on the server as well as having a static folder where you can add Html files, Css and so on. Now as far as authentication for the most part, you're gonna... Obviously, you'll have some kind of database say, use Mongodb d with Mon, you're gonna create a user's model with a login, a register And if you're building a full stack app, like, let's say you have view or React on the front end, then you're probably gonna deal with Jason web tokens. Where you pass a token back and forth to authenticate. If you're using a template engine like we're doing year, you can use passport Js. In fact, you can use passport with a full stack as well because if we look at strategies there's a bunch of different things including J t, passport local, however is what you would use if you're just dealing with just express. Just a server side app. And I do have a a whole project using passport local on Youtube. I do have some stuff with J t as well on Youtube. The best example that I can give you is my stat course. Where we build a react application, we use express on the back end and we send Jason web tokens to authenticate which is it's it's kinda difficult. It's definitely not something I would get into in in this crash course but just to kinda of give you an idea of how authentication works with express. There's there's no built in authentication, basically what I'm trying to say. So hopefully, this gave you some insight on at least, you know, making requests, handling responses, handling Http status, middle, templates, stuff like that. So if you made it this long, thank you. I know this was a long video. Most of these crash courses are, but that's it. So I will see you in the next video. Hey, guys, One of the best if not the best resource I can refer you to for starting a freelance business is at study web development dot com slash freelancing. The creator Kyle shared it with me and I can personally vouch of this bundle is well worth it. You get a hundred and thirty page guide to freelancing and it comes with things like invoice templates, client proposals, H html and Css templates a portfolio website access to a private Facebook community and much more. So use the code brad twenty five to get twenty five percent off today.